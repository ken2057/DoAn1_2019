
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Pie Chart Example</title>
    <script src="~/Scripts/jquery-3.3.1.js"></script>
    <script src="~/Scripts/d3.js"></script>
    <script src="~/Scripts/d3.min.js"></script>

    <script src="~/Scripts/dist/timelines-chart.js"></script>
    <script src="~/Scripts/loom/d3-loom.js"></script>
    <script src="~/Scripts/d3plus.js"></script>

    <style>
        .circle {
            background-color: blue;
            height: 100%;
            border-radius: 100%;
            text-align: center;
            line-height: 200px;
            font-size: 30px;
        }

            .circle span {
                line-height: normal;
                display: inline-block;
                vertical-align: middle;
                color: white;
                text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
            }
    </style>
</head>
<body>
    <div>
        <svg id="promotion" style="width:100%"></svg>
        <script>
            var data;
            $.ajax({
                url: "/test/graphPromo",
                type: "get",
                async: false,
                success: function (result) {
                    data = JSON.parse(result);
                }
            });
            TimelinesChart()('#promotion')
                .zScaleLabel('My Scale Units')
                .zQualitative(true)
                .data(data);
        </script>
    </div>
    <hr />

    <div>
        <svg id="bubble" style="width: 100%"></svg>
        <script>
            var data;
            $.ajax({
                url: "/test/graphHistory",
                type: "get",
                
                async: false,
                success: function (result) {
                    data = JSON.parse(result);
                }
            });

            var diameter = 600;
            var color = d3.scaleOrdinal(d3.schemeDark2);

            var element = document.getElementById('bubble');
            var positionInfo = element.getBoundingClientRect();
            var width = positionInfo.width;

            var bubble = d3.pack(data)
                .size([width, diameter])
                .padding(1.5);
            
            var svg = d3.select("#bubble")
                .attr("height", diameter)
                .attr("class", "bubble");

            var nodes = d3.hierarchy(data)
                .sum(function (d) { return d.Count; });
            
            var node = svg.selectAll(".node")
                .data(bubble(nodes).descendants())
                .enter()
                .filter(function (d) {
                    return !d.children
                })
                .append("g")
                .attr("class", "node")
                .attr("transform", function (d) {
                    return "translate(" + d.x+ "," + d.y + ")";
                });
            //title
            node.append("title")
                .text(function (d) {
                    return "Tên sách: " + d.data.Name + "\nMã sách: " + d.data.id;
                });
            //circle
            node.append("circle")
                .attr("r", function (d) {
                    return d.r;
                })
                .style("fill", function (d, i) {
                    return color(i);
                });
            //name book
            node.append("text")
                .attr("dy", ".2em")
                .style("text-anchor", "middle")
                .text(function (d) { 
                    return d.data.Name.substring(0, d.r / 3.5);
                })
                
                .attr("font-family", "Roboto")
                .attr("font-size", function (d) {
                    return d.r / 5;
                })
                .attr("fill", "white");
            //sl
            node.append("text")
                .attr("dy", "1.3em")
                .style("text-anchor", "middle")
                .text(function (d) {
                    return 'Sl: '+d.data.SoLuong;
                })
                .attr("font-family", "Roboto")
                .attr("font-size", function (d) {
                    return d.r / 5;
                })
                .attr("fill", "white");
            //number 
            node.append("text")
                .attr("dy", "2.3em")
                .style("text-anchor", "middle")
                .text(function (d) {
                    return 'View: '+d.data.Count;
                })
                .attr("font-family", "Roboto")
                .attr("font-size", function (d) {
                    return d.r / 5;
                })
                .attr("fill", "white");

            d3.select(self.frameElement)
                .style("height", diameter + "px");
        </script>
    </div>
    <hr />

    <div>
        <div id = "chart" ></div>
        <script>
            //create SVG
            var w = document.getElementById('chart').offsetWidth;
            var margin = { left: w*0.275, top: 70, right: 120, bottom: 50 },
                width = 710,
                height = 600,
                innerRadius = 244,
                outerRadius = innerRadius * 1.05;
                                
            var svg = d3.select("#chart").append("svg")
                .attr('align', 'center')
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom);

                        //Some default parameters
            var pullOutSize = 20 + 30 / 135 * innerRadius;
            var numFormat = d3.format(",.0f");
                        //Manually sorted the inner characters based on the total number of words spoken
            
                        //Initiate the loom function with all the options
            var loom = d3.loom()
                .padAngle(0.05)
                .sortGroups(d3.descending)
                .sortSubgroups(d3.ascending)
                .heightInner(50)
                .emptyPerc(1)
                .widthInner(30)
                .value(function (d) { return d.count; })
                .inner(function (d) { return d.group; })
                .outer(function (d) { return d.theloai; });
                    //Initiate the inner string function that belongs to the loom
            var string = d3.string()
                .radius(innerRadius)
                .pullout(pullOutSize);
                    //Initiate an arc drawing function that is also needed
            var arc = d3.arc()
                .innerRadius(innerRadius * 1.01)
                .outerRadius(outerRadius);
                                    
            //color
            var color = d3.scaleOrdinal(d3.schemeSet1)
            //data
            var testData;
            $.ajax({
                url: "/test/GraphGroupDataCustomer",
                type: "get",

                async: false,
                success: function (result) {
                    testData = JSON.parse(result);
                }
            });

				//Create a group that already holds the data
            var g = svg.append("g")
                .attr("transform", "translate(" + (width / 2 + margin.left) + "," + (height / 2 + margin.top) + ")")
                .datum(loom(testData));
            ////////////////////// Draw outer arcs /////////////////////
            var arcGroup = g.append("g").attr("class", "arc-outer-wrapper");
                        //Create a group per outer arc, which will contain the arc path + the location name & number of words text
            var arcs = arcGroup.selectAll(".arc-wrapper")
                .data(function (s) { return s.groups; })
                .enter().append("g")
                .attr("class", "arc-wrapper")
                .each(function (d) { d.pullOutSize = (pullOutSize * (d.startAngle > Math.PI + 1e-2 ? -1 : 1)) });
                    //Create the actual arc paths
            var outerArcs = arcs.append("path")
                .attr("class", "arc")
                .style("fill", function (d) { return color(d.outername); })
                .attr("d", arc)
                .attr("transform", function (d, i) {
                    return "translate(" + d.pullOutSize + ',' + 0 + ")"; //Pull the two slices apart
                });

				//////////////////// Draw outer labels /////////////////////
				//The text needs to be rotated with the offset in the clockwise direction
            var outerLabels = arcs.append("g")
                .each(function (d) { d.angle = ((d.startAngle + d.endAngle) / 2); })
                .attr("class", "outer-labels")
                .attr("text-anchor", function (d) { return d.angle > Math.PI ? "end" : null; })
                .attr("transform", function (d, i) {
                    var c = arc.centroid(d);
                    return "translate(" + (c[0] + d.pullOutSize) + "," + c[1] + ")"
                        + "rotate(" + (d.angle * 180 / Math.PI - 90) + ")"
                        + "translate(" + 26 + ",0)"
                        + (d.angle > Math.PI ? "rotate(180)" : "")
                });

				//The outer name
            outerLabels.append("text")
                .attr("class", "outer-label")
                .attr("dy", ".35em")
                .attr("font-family", "Roboto")
                .text(function (d, i) { return d.outername; });
                    
                //The value below it
            outerLabels.append("text")
                .attr("class", "outer-label-value")
                .attr("dy", "1.5em")
                .attr("font-family", "Roboto")
                .text(function (d, i) { return numFormat(d.value) + " time"; });

            //////////////////// Draw inner strings ////////////////////    
            var stringGroup = g.append("g").attr("class", "string-wrapper");
                    //Draw the paths of the inner strings
            var strings = stringGroup.selectAll("path")
                .data(function (strings) { return strings; })
                .enter().append("path")
                .attr("class", "string")
                .style("fill", function (d) { return d3.rgb(color(d.outer.outername)).brighter(0.2); })
                .style("opacity", 0.85)
                .attr("d", string);
                    
            //////////////////// Draw inner labels /////////////////////
            var innerLabelGroup = g.append("g").attr("class", "inner-label-wrapper");
                    //Place the inner text labels in the middle
            var innerLabels = innerLabelGroup.selectAll("text")
                .data(function (s) { return s.innergroups; })
                .enter().append("text")
                .attr("class", "inner-label")
                .attr("font-family", "Roboto")
                .attr("x", function (d, i) { return d.x - 25; })
                .attr("y", function (d, i) { return d.y; })
                .attr("dy", ".35em")
                .text(function (d, i) { return d.name; });

        </script>
    </div>
    <br />
    <div></div>
</body>

</html>