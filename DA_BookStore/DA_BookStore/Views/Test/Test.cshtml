
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Graph Example</title>
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet"
          href="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css"
          integrity="sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu"
          crossorigin="anonymous" />

    <!-- Optional theme -->
    <link rel="stylesheet"
          href="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap-theme.min.css"
          integrity="sha384-6pzBo3FDv/PJ8r2KRkGHifhEocL+1X2rVCTTkUfGk7/0pbek5mMa1upzvWbrUbOZ"
          crossorigin="anonymous" />

    <!-- Latest compiled and minified JavaScript -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"
            integrity="sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd"
            crossorigin="anonymous"></script>

    <script src="~/Scripts/jquery-3.3.1.js"></script>
    <script src="~/Scripts/d3.js"></script>
    <script src="~/Scripts/d3.min.js"></script>
    <script src="https://d3js.org/d3.v4.js"></script>
    <script src="~/Scripts/dist/timelines-chart.js"></script>
    <script src="~/Scripts/loom/d3-loom.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/holtzy/D3-graph-gallery@master/LIB/sankey.js"></script>
    <style>
        .circle {
            background-color: blue;
            height: 100%;
            border-radius: 100%;
            text-align: center;
            line-height: 200px;
            font-size: 30px;
        }

            .circle span {
                line-height: normal;
                display: inline-block;
                vertical-align: middle;
                color: white;
                text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
            }

        body {
            background-color: gray;
        }

        .bubbles {
            stroke-width: 2px;
            stroke: white;
        }

            .bubbles:hover {
                stroke: black;
            }

        .tooltip {
            position: absolute;
            z-index: 1070;
            margin: 0;
            font-family: 'Roboto';
            font-style: normal;
            font-weight: 400;
            line-height: 1.5;
            text-align: left;
            font-size: .875rem;
            opacity: 0;
        }

        .container {
            margin: 0;
            padding: 0;
        }
        .col-md-4{
            margin:0;
            padding:0;
        }
    </style>
</head>
<body>
    <div class="container" style="width: 100%">
        <svg id="promotion" style="width:100%"></svg>
        <script>
            var data;
            $.ajax({
                url: "/test/graphPromo",
                type: "get",
                async: false,
                success: function (result) {
                    data = JSON.parse(result);
                }
            });
            TimelinesChart()('#promotion')
                .zScaleLabel('My Scale Units')
                .zQualitative(true)
                .data(data);
        </script>
    </div>
    <div class="container" style="width: 100%">
        <div class="col-md-4" id="chart" style="margin-left: -150px; width: auto"></div>
        <div class="col-md-4" id="bubble-father">
            <svg id="bubble" ></svg>
        </div>
        <div class="col-md-4" id="my_dataviz"></div>
    </div>

    <script>
        //create SVG
        var w = document.getElementById('chart').offsetWidth;
        var margin = { left: 50, top: 70, right: 0, bottom: 50 },
            width = 700,
            height = 400,
            innerRadius = 150, //244,
            outerRadius = innerRadius * 1.05;

        var svg = d3.select("#chart").append("svg")
            .attr('align', 'center')
            .attr("width", width)
            .attr("height", height + margin.top + margin.bottom);

        //Some default parameters
        var pullOutSize = 20 + 30 / 135 * innerRadius;
        var numFormat = d3.format(",.0f");
        //Manually sorted the inner characters based on the total number of words spoken

        //Initiate the loom function with all the options
        var loom = d3.loom()
            .padAngle(0.05)
            .sortGroups(d3.descending)
            .sortSubgroups(d3.ascending)
            .heightInner(50)
            .emptyPerc(1)
            .widthInner(30)
            .value(function (d) { return d.count; })
            .inner(function (d) { return d.group; })
            .outer(function (d) { return d.theloai; });
        //Initiate the inner string function that belongs to the loom
        var string = d3.string()
            .radius(innerRadius)
            .pullout(pullOutSize);
        //Initiate an arc drawing function that is also needed
        var arc = d3.arc()
            .innerRadius(innerRadius * 1.01)
            .outerRadius(outerRadius);

        //color
        var color = d3.scaleOrdinal(d3.schemeSet1)
        //data
        var testData;
        $.ajax({
            url: "/test/GraphGroupDataCustomer",
            type: "get",
            async: false,
            success: function (result) {
                testData = JSON.parse(result);
            }
        });

        //Create a group that already holds the data
        var g = svg.append("g")
            .attr("transform", "translate(" + (width / 2 + margin.left) + "," + (height / 2 + margin.top) + ")")
            .datum(loom(testData));
        ////////////////////// Draw outer arcs /////////////////////
        var arcGroup = g.append("g").attr("class", "arc-outer-wrapper");
        //Create a group per outer arc, which will contain the arc path + the location name & number of words text
        var arcs = arcGroup.selectAll(".arc-wrapper")
            .data(function (s) { return s.groups; })
            .enter().append("g")
            .attr("class", "arc-wrapper")
            .each(function (d) { d.pullOutSize = (pullOutSize * (d.startAngle > Math.PI + 1e-2 ? -1 : 1)) });
        //Create the actual arc paths
        var outerArcs = arcs.append("path")
            .attr("class", "arc")
            .style("fill", function (d) { return color(d.outername); })
            .attr("d", arc)
            .attr("transform", function (d, i) {
                return "translate(" + d.pullOutSize + ',' + 0 + ")"; //Pull the two slices apart
            });

        //////////////////// Draw inner strings ////////////////////
        var stringGroup = g.append("g").attr("class", "string-wrapper");
        //Draw the paths of the inner strings
        var strings = stringGroup.selectAll("path")
            .data(function (strings) { return strings; })
            .enter().append("path")
            .attr("class", "a")
            .style("fill", function (d) { return d3.rgb(color(d.outer.outername)).brighter(0.3); })
            .style("opacity", 0.65)
            .attr("d", string);

        //////////////////// Draw inner labels /////////////////////
        var innerLabelGroup = g.append("g").attr("class", "inner-label-wrapper");
        //Place the inner text labels in the middle
        var innerLabels = innerLabelGroup.selectAll("text")
            .data(function (s) { return s.innergroups; })
            .enter().append("text")
            .attr("class", "inner-label")
            .attr("font-family", "Roboto")
            .attr("x", function (d, i) { return d.x - 25; })
            .attr("y", function (d, i) { return d.y; })
            .attr("dy", ".35em")
            .text(function (d, i) { return d.name; });

        //////////////////// Draw outer labels /////////////////////
        //The text needs to be rotated with the offset in the clockwise direction
        var outerLabels = arcs.append("g")
            .each(function (d) { d.angle = ((d.startAngle + d.endAngle) / 2); })
            .attr("class", "outer-labels")
            .attr("text-anchor", function (d) { return d.angle > Math.PI ? "end" : null; })
            .attr("transform", function (d, i) {
                var c = arc.centroid(d);
                return "translate(" + (c[0] + d.pullOutSize) + "," + c[1] + ")"
                    + "rotate(" + (d.angle * 180 / Math.PI) + ")"
                    + "translate(" + 10 + ",-35)"
                    + (d.angle > Math.PI ? "rotate(360)" : "")
                    + ((d.angle * 180 / Math.PI) >= 180 && (d.angle * 180 / Math.PI) <= 190 ? "rotate(180)" : "")
            });

        //The outer name
        outerLabels.append("text")
            .attr("class", "outer-label")
            .attr("dy", ".35em")
            .attr('text-anchor', 'middle')
            .attr("font-family", "Roboto")
            .text(function (d, i) { return d.outername; });

        //The value below it
        outerLabels.append("text")
            .attr('text-anchor', 'middle')
            .attr("class", "outer-label-value")
            .attr("dy", "1.5em")
            .attr("font-family", "Roboto")
            .text(function (d, i) { return numFormat(d.value) + " time"; });
    </script>
    <script>
        var data;
        $.ajax({
            url: "/test/graphHistory",
            type: "get",
            async: false,
            success: function (result) {
                data = JSON.parse(result);
            }
        });

        var diameter = 500;
        var color = d3.scaleOrdinal(d3.schemeDark2);

        var element = document.getElementById('bubble');
        var positionInfo = element.getBoundingClientRect();
        var width = positionInfo.width;

        var bubble = d3.pack(data)
            .size([width*1.2, diameter]);

        var svg = d3.select("#bubble")
            .attr("height", diameter)
            .attr('width', '100%')
            .attr("class", "bubble");

        var nodes = d3.hierarchy(data)
            .sum(function (d) { return d.Count; });

        var tooltip = d3.select("#bubble-father")
            .append("div")
            .style("opacity", 0)
            .attr("class", "tooltip")
            .style("background-color", "black")
            .style('font-size','1.5rem')
            .style("border-radius", "5px")
            .style("padding", "10px")
            .style("color", "white")

        var showTooltip = function (d) {
            tooltip.transition()
                .duration(200)
            tooltip.style("opacity", 1)
                .html(d.data.id + " - " + d.data.Name + " - View: " + d.data.SoLuong)
                .style("left", 0 + "px")
                .style("top", 0 + "px")
        }
        var moveTooltip = function (d) {
            tooltip
                .style("left", 0 + "px")
                .style("top", 0 + "px")
        }
        var hideTooltip = function (d) {
            tooltip.transition()
                .duration(200)
                .style("opacity", 0)
        }

        var node = svg.selectAll(".node")
            .data(bubble(nodes).descendants())
            .enter()
            .filter(function (d) {
                return !d.children
            })
            .append("g")
            .attr("class", "node")
            .attr("transform", function (d) {
                return "translate(" + d.x + "," + d.y + ")";
            })
            .on('click', function (d) {
                navigator.clipboard.writeText(d.data.id);
                tooltip.transition()
                    .duration(200)
                tooltip.style("opacity", 1)
                    .html('Copied id ' + d.data.id + ' to clipboard')
                    .style("left", 0 + "px")
                    .style("top", 0 + "px")
            })
            .on("mouseover", showTooltip)
            .on("mousemove", moveTooltip)
            .on("mouseleave", hideTooltip);

        //circle
        node.append("circle")
            .attr("r", function (d) {
                return d.r;
            })
            .style("fill", function (d, i) {
                return color(i);
            });
        //name book
        node.append("text")
            .attr("dy", ".2em")
            .style("text-anchor", "middle")
            .text(function (d) {
                return d.data.Name.substring(0, d.r / 3.5);
            })

            .attr("font-family", "Roboto")
            .attr("font-size", function (d) {
                return d.r / 4;
            })
            .attr("fill", "white");
        //sl
        node.append("text")
            .attr("dy", "1.3em")
            .style("text-anchor", "middle")
            .text(function (d) {
                return 'Sl: ' + d.data.SoLuong;
            })
            .attr("font-family", "Roboto")
            .attr("font-size", function (d) {
                return d.r / 5;
            })
            .attr("fill", "white");
        //number
        node.append("text")
            .attr("dy", "2.3em")
            .style("text-anchor", "middle")
            .text(function (d) {
                return 'View: ' + d.data.Count;
            })
            .attr("font-family", "Roboto")
            .attr("font-size", function (d) {
                return d.r / 5;
            })
            .attr("fill", "white");

        d3.select(self.frameElement)
            .style("height", diameter + "px");
    </script>
    <script>
        var w = document.getElementById('my_dataviz').offsetWidth;
        // set the dimensions and margins of the graph
        var margin = { top: 10, right: 50, bottom: 30, left: 50 },
            width = w - margin.left - margin.right,
            height = 420 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select("#my_dataviz")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        //Read the data
        d3.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/4_ThreeNum.csv", function (data) {

            // Add X axis
            var x = d3.scaleLinear()
                .domain([0, 10000])
                .range([0, width]);
            svg.append("g")
                .attr("transform", "translate(0," + height + ")")
                .call(d3.axisBottom(x));

            // Add Y axis
            var y = d3.scaleLinear()
                .domain([35, 90])
                .range([height, 0]);
            svg.append("g")
                .call(d3.axisLeft(y));

            // Add a scale for bubble size
            var z = d3.scaleLinear()
                .domain([200000, 1310000000])
                .range([4, 40]);

            // Add a scale for bubble color
            var myColor = d3.scaleOrdinal()
                .domain(["Asia", "Europe", "Americas", "Africa", "Oceania"])
                .range(d3.schemeSet2);

            // -1- Create a tooltip div that is hidden by default:
            var tooltip = d3.select("#my_dataviz")
                .append("div")
                .style("opacity", 0)
                .attr("class", "tooltip")
                .style("background-color", "black")
                .style("border-radius", "5px")
                .style("padding", "10px")
                .style("color", "white")

            var showTooltip = function (d) {
                tooltip.transition()
                    .duration(200)
                tooltip.style("opacity", 1)
                    .html("Country: " + d.country)
                    .style("left", (d3.mouse(this)[0] + 30) + "px")
                    .style("top", (d3.mouse(this)[1] + 30) + "px")
            }
            var moveTooltip = function (d) {
                tooltip
                    .style("left", (d3.mouse(this)[0] + 30) + "px")
                    .style("top", (d3.mouse(this)[1] + 30) + "px")
            }
            var hideTooltip = function (d) {
                tooltip.transition()
                    .duration(200)
                    .style("opacity", 0)
            }

            // Add dots
            svg.append('g')
                .selectAll("dot")
                .data(data)
                .enter()
                .append("circle")
                .attr("class", "bubbles")
                .attr("cx", function (d) { return x(d.gdpPercap); })
                .attr("cy", function (d) { return y(d.lifeExp); })
                .attr("r", function (d) { return z(d.pop); })
                .style("fill", function (d) { return myColor(d.continent); })
                // -3- Trigger the functions
                .on("mouseover", showTooltip)
                .on("mousemove", moveTooltip)
                .on("mouseleave", hideTooltip)

        })
    </script>

</body>

</html>